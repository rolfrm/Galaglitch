#version 430

uniform int points;
uniform vec2 pos;
uniform vec2 player_pos;
uniform float t;
layout(std430, binding = 0) buffer dest
{
  float data[];
};
layout(local_size_x = 16, local_size_y = 1) in;
#define M_PI 3.1415926535897932384626433832795

float circle_distance(vec2 p, vec2 c, float r){
  return length(c - p) - r;
}

float distancefcn(vec2 p){
  float d2 = circle_distance(p, player_pos + vec2(0,0), 10);
  /*if(p.x < 0)
    return p.x;
  if(p.x > 500)
  return 500 - p.x;*/
  vec2 p2 = p;
  p2.y = p2.y - t * 10;
  p2.y = mod(p2.y, 2000);		
  float d1 = circle_distance(p2, vec2(130,500), 120);
  
  vec2 p3 = p;
  p3.y = p.y - t * 9;
  p3.y = mod(p3.y, 2000);		
  float d3 = circle_distance(p3, vec2(380,500), 120);
  return min(abs(510 - p.x), min(abs(-10 - p.x), min(d3, min(d2, d1)))); 
}

float trace_distance(vec2 p, vec2 direction){
  float distance = 0.0;
  while(distance < 500){
    float d = distancefcn(p);
    p = p + direction * d;
    distance += d;
    if(d < 1)
      return distance;
  }
  return 500;
}


void main(){
  int index = int(gl_GlobalInvocationID.x);
  float angle = 2.0 * M_PI * float(index) / points;
  data[index * 2 + 2] = angle;
  data[index * 2 + 1 + 2] = trace_distance(pos, vec2(sin(angle),cos(angle)));
}



/*uniform float roll;
uniform int points;
layout(std430, binding = 0) buffer dest
{
  float data[];
};
layout(local_size_x = 16, local_size_y = 1) in;
void main(){
  ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
  float localCoef = length(vec2(ivec2(gl_LocalInvocationID.xy) - 8) /8.0);
  float globalCoef = sin(float(gl_WorkGroupID.x + gl_WorkGroupID.y) * 0.1 + roll) * 0.5;
  data[gl_GlobalInvocationID.x * 2 + 1] = (globalCoef + localCoef) * 100;
  data[gl_GlobalInvocationID.x * 2] = storePos.x * 0.05 + roll * 0.1;

}

*/
